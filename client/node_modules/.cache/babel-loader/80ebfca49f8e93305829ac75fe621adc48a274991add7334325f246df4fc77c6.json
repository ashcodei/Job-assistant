{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ashut\\\\Documents\\\\Projects\\\\JobsAI\\\\client\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport axios from 'axios';\nimport { toast } from 'react-hot-toast';\nimport { jwtDecode } from 'jwt-decode';\n\n// Create auth context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\n// Auth provider component\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [currentUser, setCurrentUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [authToken, setAuthToken] = useState(localStorage.getItem('auth_token') || null);\n  const navigate = useNavigate();\n\n  // Configure axios - explicitly set API URL to port 3000\n  axios.defaults.baseURL = process.env.REACT_APP_API_URL || 'http://localhost:3000';\n\n  // Add auth token to requests\n  useEffect(() => {\n    if (authToken) {\n      axios.defaults.headers.common['Authorization'] = `Bearer ${authToken}`;\n    } else {\n      delete axios.defaults.headers.common['Authorization'];\n    }\n  }, [authToken]);\n\n  // Check if token is valid on initial load\n  useEffect(() => {\n    const verifyToken = async () => {\n      if (!authToken) {\n        setLoading(false);\n        return;\n      }\n      try {\n        // Check if token is expired\n        const decodedToken = jwtDecode(authToken);\n        const currentTime = Date.now() / 1000;\n        if (decodedToken.exp < currentTime) {\n          // Token is expired\n          logout();\n          return;\n        }\n\n        // Verify token with the server\n        const response = await axios.get('/api/auth/validate');\n        setCurrentUser(response.data.user);\n      } catch (error) {\n        console.error('Token validation error:', error);\n        logout();\n      } finally {\n        setLoading(false);\n      }\n    };\n    verifyToken();\n  }, [authToken]);\n\n  // Login user\n  const login = async (email, password) => {\n    try {\n      setLoading(true);\n      const response = await axios.post('/auth/login', {\n        email,\n        password\n      });\n\n      // Save token and user data\n      localStorage.setItem('auth_token', response.data.token);\n      setAuthToken(response.data.token);\n      setCurrentUser(response.data.user);\n      toast.success('Logged in successfully!');\n      navigate('/dashboard');\n      return response.data;\n    } catch (error) {\n      console.error('Login error:', error);\n      let errorMessage = 'Login failed. Please try again.';\n      if (error.response) {\n        errorMessage = error.response.data.error || errorMessage;\n\n        // Check if email needs verification\n        if (error.response.data.needsVerification) {\n          toast.error('Please verify your email before logging in');\n          navigate('/verify-email', {\n            state: {\n              email\n            }\n          });\n          return;\n        }\n      }\n      toast.error(errorMessage);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Register user\n  const register = async (name, email, password) => {\n    try {\n      setLoading(true);\n      const response = await axios.post('/api/auth/register', {\n        name,\n        email,\n        password\n      });\n      toast.success('Registration successful! Please check your email to verify your account.');\n      navigate('/verify-email', {\n        state: {\n          email\n        }\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Registration error:', error);\n      let errorMessage = 'Registration failed. Please try again.';\n      if (error.response) {\n        errorMessage = error.response.data.error || errorMessage;\n      }\n      toast.error(errorMessage);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Logout user\n  const logout = () => {\n    localStorage.removeItem('auth_token');\n    setAuthToken(null);\n    setCurrentUser(null);\n    navigate('/login');\n  };\n\n  // Google authentication\n  const googleAuth = async (googleToken, userData) => {\n    try {\n      setLoading(true);\n      const response = await axios.post('/api/auth/google', {\n        googleToken,\n        email: userData.email,\n        name: userData.name,\n        picture: userData.picture\n      });\n\n      // Save token and user data\n      localStorage.setItem('auth_token', response.data.token);\n      setAuthToken(response.data.token);\n      setCurrentUser(response.data.user);\n      toast.success('Logged in successfully!');\n      navigate('/dashboard');\n      return response.data;\n    } catch (error) {\n      console.error('Google auth error:', error);\n      let errorMessage = 'Google authentication failed. Please try again.';\n      if (error.response) {\n        errorMessage = error.response.data.error || errorMessage;\n      }\n      toast.error(errorMessage);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Verify email\n  const verifyEmail = async token => {\n    try {\n      setLoading(true);\n      const response = await axios.post('/api/auth/verify-email', {\n        token\n      });\n\n      // Save token and user data\n      localStorage.setItem('auth_token', response.data.token);\n      setAuthToken(response.data.token);\n      setCurrentUser(response.data.user);\n      toast.success('Email verified successfully!');\n      navigate('/dashboard');\n      return response.data;\n    } catch (error) {\n      console.error('Email verification error:', error);\n      let errorMessage = 'Email verification failed. Please try again.';\n      if (error.response) {\n        errorMessage = error.response.data.error || errorMessage;\n      }\n      toast.error(errorMessage);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Resend verification email\n  const resendVerification = async email => {\n    try {\n      setLoading(true);\n      await axios.post('/api/auth/resend-verification', {\n        email\n      });\n      toast.success('Verification email sent! Please check your inbox.');\n      return true;\n    } catch (error) {\n      console.error('Resend verification error:', error);\n      let errorMessage = 'Failed to resend verification email. Please try again.';\n      if (error.response) {\n        errorMessage = error.response.data.error || errorMessage;\n      }\n      toast.error(errorMessage);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Forgot password\n  const forgotPassword = async email => {\n    try {\n      setLoading(true);\n      await axios.post('/api/auth/forgot-password', {\n        email\n      });\n      toast.success('Password reset email sent! Please check your inbox.');\n      return true;\n    } catch (error) {\n      console.error('Forgot password error:', error);\n      let errorMessage = 'Failed to send reset email. Please try again.';\n      if (error.response) {\n        errorMessage = error.response.data.error || errorMessage;\n      }\n      toast.error(errorMessage);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Reset password\n  const resetPassword = async (token, password) => {\n    try {\n      setLoading(true);\n      const response = await axios.post('/api/auth/reset-password', {\n        token,\n        password\n      });\n\n      // Save token and user data\n      localStorage.setItem('auth_token', response.data.token);\n      setAuthToken(response.data.token);\n      setCurrentUser(response.data.user);\n      toast.success('Password reset successful!');\n      navigate('/dashboard');\n      return response.data;\n    } catch (error) {\n      console.error('Reset password error:', error);\n      let errorMessage = 'Password reset failed. Please try again.';\n      if (error.response) {\n        errorMessage = error.response.data.error || errorMessage;\n      }\n      toast.error(errorMessage);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Update user profile\n  const updateProfile = async userData => {\n    try {\n      setLoading(true);\n      const response = await axios.put('/api/user/profile', userData);\n      setCurrentUser(response.data.user);\n      toast.success('Profile updated successfully!');\n      return response.data.user;\n    } catch (error) {\n      console.error('Update profile error:', error);\n      let errorMessage = 'Failed to update profile. Please try again.';\n      if (error.response) {\n        errorMessage = error.response.data.error || errorMessage;\n      }\n      toast.error(errorMessage);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Change password\n  const changePassword = async (currentPassword, newPassword) => {\n    try {\n      setLoading(true);\n      await axios.post('/api/user/change-password', {\n        currentPassword,\n        newPassword\n      });\n      toast.success('Password changed successfully!');\n      return true;\n    } catch (error) {\n      console.error('Change password error:', error);\n      let errorMessage = 'Failed to change password. Please try again.';\n      if (error.response) {\n        errorMessage = error.response.data.error || errorMessage;\n      }\n      toast.error(errorMessage);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Delete account\n  const deleteAccount = async () => {\n    try {\n      setLoading(true);\n      await axios.delete('/api/user/account');\n      localStorage.removeItem('auth_token');\n      setAuthToken(null);\n      setCurrentUser(null);\n      toast.success('Account deleted successfully.');\n      navigate('/');\n      return true;\n    } catch (error) {\n      console.error('Delete account error:', error);\n      let errorMessage = 'Failed to delete account. Please try again.';\n      if (error.response) {\n        errorMessage = error.response.data.error || errorMessage;\n      }\n      toast.error(errorMessage);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Context value\n  const value = {\n    currentUser,\n    loading,\n    login,\n    register,\n    logout,\n    googleAuth,\n    verifyEmail,\n    resendVerification,\n    forgotPassword,\n    resetPassword,\n    updateProfile,\n    changePassword,\n    deleteAccount,\n    isAuthenticated: !!authToken\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 373,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook to use auth context\n_s(AuthProvider, \"EfkINCpO3551u2QYuiyITJUebXs=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useNavigate","axios","toast","jwtDecode","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","currentUser","setCurrentUser","loading","setLoading","authToken","setAuthToken","localStorage","getItem","navigate","defaults","baseURL","process","env","REACT_APP_API_URL","headers","common","verifyToken","decodedToken","currentTime","Date","now","exp","logout","response","get","data","user","error","console","login","email","password","post","setItem","token","success","errorMessage","needsVerification","state","register","name","removeItem","googleAuth","googleToken","userData","picture","verifyEmail","resendVerification","forgotPassword","resetPassword","updateProfile","put","changePassword","currentPassword","newPassword","deleteAccount","delete","value","isAuthenticated","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["C:/Users/ashut/Documents/Projects/JobsAI/client/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport { toast } from 'react-hot-toast';\r\nimport { jwtDecode } from 'jwt-decode';\r\n\r\n// Create auth context\r\nconst AuthContext = createContext();\r\n\r\n// Auth provider component\r\nexport const AuthProvider = ({ children }) => {\r\n  const [currentUser, setCurrentUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [authToken, setAuthToken] = useState(localStorage.getItem('auth_token') || null);\r\n  \r\n  const navigate = useNavigate();\r\n  \r\n  // Configure axios - explicitly set API URL to port 3000\r\n  axios.defaults.baseURL = process.env.REACT_APP_API_URL || 'http://localhost:3000';\r\n  \r\n  // Add auth token to requests\r\n  useEffect(() => {\r\n    if (authToken) {\r\n      axios.defaults.headers.common['Authorization'] = `Bearer ${authToken}`;\r\n    } else {\r\n      delete axios.defaults.headers.common['Authorization'];\r\n    }\r\n  }, [authToken]);\r\n  \r\n  // Check if token is valid on initial load\r\n  useEffect(() => {\r\n    const verifyToken = async () => {\r\n      if (!authToken) {\r\n        setLoading(false);\r\n        return;\r\n      }\r\n      \r\n      try {\r\n        // Check if token is expired\r\n        const decodedToken = jwtDecode(authToken);\r\n        const currentTime = Date.now() / 1000;\r\n        \r\n        if (decodedToken.exp < currentTime) {\r\n          // Token is expired\r\n          logout();\r\n          return;\r\n        }\r\n        \r\n        // Verify token with the server\r\n        const response = await axios.get('/api/auth/validate');\r\n        setCurrentUser(response.data.user);\r\n      } catch (error) {\r\n        console.error('Token validation error:', error);\r\n        logout();\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    \r\n    verifyToken();\r\n  }, [authToken]);\r\n  \r\n  // Login user\r\n  const login = async (email, password) => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await axios.post('/auth/login', { email, password });\r\n      \r\n      // Save token and user data\r\n      localStorage.setItem('auth_token', response.data.token);\r\n      setAuthToken(response.data.token);\r\n      setCurrentUser(response.data.user);\r\n      \r\n      toast.success('Logged in successfully!');\r\n      navigate('/dashboard');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Login error:', error);\r\n      let errorMessage = 'Login failed. Please try again.';\r\n      \r\n      if (error.response) {\r\n        errorMessage = error.response.data.error || errorMessage;\r\n        \r\n        // Check if email needs verification\r\n        if (error.response.data.needsVerification) {\r\n          toast.error('Please verify your email before logging in');\r\n          navigate('/verify-email', { state: { email } });\r\n          return;\r\n        }\r\n      }\r\n      \r\n      toast.error(errorMessage);\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  \r\n  // Register user\r\n  const register = async (name, email, password) => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await axios.post('/api/auth/register', {\r\n        name,\r\n        email,\r\n        password\r\n      });\r\n      \r\n      toast.success('Registration successful! Please check your email to verify your account.');\r\n      navigate('/verify-email', { state: { email } });\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Registration error:', error);\r\n      let errorMessage = 'Registration failed. Please try again.';\r\n      \r\n      if (error.response) {\r\n        errorMessage = error.response.data.error || errorMessage;\r\n      }\r\n      \r\n      toast.error(errorMessage);\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  \r\n  // Logout user\r\n  const logout = () => {\r\n    localStorage.removeItem('auth_token');\r\n    setAuthToken(null);\r\n    setCurrentUser(null);\r\n    navigate('/login');\r\n  };\r\n  \r\n  // Google authentication\r\n  const googleAuth = async (googleToken, userData) => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await axios.post('/api/auth/google', {\r\n        googleToken,\r\n        email: userData.email,\r\n        name: userData.name,\r\n        picture: userData.picture\r\n      });\r\n      \r\n      // Save token and user data\r\n      localStorage.setItem('auth_token', response.data.token);\r\n      setAuthToken(response.data.token);\r\n      setCurrentUser(response.data.user);\r\n      \r\n      toast.success('Logged in successfully!');\r\n      navigate('/dashboard');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Google auth error:', error);\r\n      let errorMessage = 'Google authentication failed. Please try again.';\r\n      \r\n      if (error.response) {\r\n        errorMessage = error.response.data.error || errorMessage;\r\n      }\r\n      \r\n      toast.error(errorMessage);\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  \r\n  // Verify email\r\n  const verifyEmail = async (token) => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await axios.post('/api/auth/verify-email', { token });\r\n      \r\n      // Save token and user data\r\n      localStorage.setItem('auth_token', response.data.token);\r\n      setAuthToken(response.data.token);\r\n      setCurrentUser(response.data.user);\r\n      \r\n      toast.success('Email verified successfully!');\r\n      navigate('/dashboard');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Email verification error:', error);\r\n      let errorMessage = 'Email verification failed. Please try again.';\r\n      \r\n      if (error.response) {\r\n        errorMessage = error.response.data.error || errorMessage;\r\n      }\r\n      \r\n      toast.error(errorMessage);\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  \r\n  // Resend verification email\r\n  const resendVerification = async (email) => {\r\n    try {\r\n      setLoading(true);\r\n      await axios.post('/api/auth/resend-verification', { email });\r\n      \r\n      toast.success('Verification email sent! Please check your inbox.');\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Resend verification error:', error);\r\n      let errorMessage = 'Failed to resend verification email. Please try again.';\r\n      \r\n      if (error.response) {\r\n        errorMessage = error.response.data.error || errorMessage;\r\n      }\r\n      \r\n      toast.error(errorMessage);\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  \r\n  // Forgot password\r\n  const forgotPassword = async (email) => {\r\n    try {\r\n      setLoading(true);\r\n      await axios.post('/api/auth/forgot-password', { email });\r\n      \r\n      toast.success('Password reset email sent! Please check your inbox.');\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Forgot password error:', error);\r\n      let errorMessage = 'Failed to send reset email. Please try again.';\r\n      \r\n      if (error.response) {\r\n        errorMessage = error.response.data.error || errorMessage;\r\n      }\r\n      \r\n      toast.error(errorMessage);\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  \r\n  // Reset password\r\n  const resetPassword = async (token, password) => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await axios.post('/api/auth/reset-password', {\r\n        token,\r\n        password\r\n      });\r\n      \r\n      // Save token and user data\r\n      localStorage.setItem('auth_token', response.data.token);\r\n      setAuthToken(response.data.token);\r\n      setCurrentUser(response.data.user);\r\n      \r\n      toast.success('Password reset successful!');\r\n      navigate('/dashboard');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Reset password error:', error);\r\n      let errorMessage = 'Password reset failed. Please try again.';\r\n      \r\n      if (error.response) {\r\n        errorMessage = error.response.data.error || errorMessage;\r\n      }\r\n      \r\n      toast.error(errorMessage);\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  \r\n  // Update user profile\r\n  const updateProfile = async (userData) => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await axios.put('/api/user/profile', userData);\r\n      \r\n      setCurrentUser(response.data.user);\r\n      toast.success('Profile updated successfully!');\r\n      return response.data.user;\r\n    } catch (error) {\r\n      console.error('Update profile error:', error);\r\n      let errorMessage = 'Failed to update profile. Please try again.';\r\n      \r\n      if (error.response) {\r\n        errorMessage = error.response.data.error || errorMessage;\r\n      }\r\n      \r\n      toast.error(errorMessage);\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  \r\n  // Change password\r\n  const changePassword = async (currentPassword, newPassword) => {\r\n    try {\r\n      setLoading(true);\r\n      await axios.post('/api/user/change-password', {\r\n        currentPassword,\r\n        newPassword\r\n      });\r\n      \r\n      toast.success('Password changed successfully!');\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Change password error:', error);\r\n      let errorMessage = 'Failed to change password. Please try again.';\r\n      \r\n      if (error.response) {\r\n        errorMessage = error.response.data.error || errorMessage;\r\n      }\r\n      \r\n      toast.error(errorMessage);\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  \r\n  // Delete account\r\n  const deleteAccount = async () => {\r\n    try {\r\n      setLoading(true);\r\n      await axios.delete('/api/user/account');\r\n      \r\n      localStorage.removeItem('auth_token');\r\n      setAuthToken(null);\r\n      setCurrentUser(null);\r\n      \r\n      toast.success('Account deleted successfully.');\r\n      navigate('/');\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Delete account error:', error);\r\n      let errorMessage = 'Failed to delete account. Please try again.';\r\n      \r\n      if (error.response) {\r\n        errorMessage = error.response.data.error || errorMessage;\r\n      }\r\n      \r\n      toast.error(errorMessage);\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  \r\n  // Context value\r\n  const value = {\r\n    currentUser,\r\n    loading,\r\n    login,\r\n    register,\r\n    logout,\r\n    googleAuth,\r\n    verifyEmail,\r\n    resendVerification,\r\n    forgotPassword,\r\n    resetPassword,\r\n    updateProfile,\r\n    changePassword,\r\n    deleteAccount,\r\n    isAuthenticated: !!authToken\r\n  };\r\n  \r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\n// Custom hook to use auth context\r\nexport const useAuth = () => {\r\n  return useContext(AuthContext);\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}