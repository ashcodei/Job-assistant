{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ashut\\\\Documents\\\\Projects\\\\JobsAI\\\\client\\\\src\\\\contexts\\\\ResumeContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { toast } from 'react-hot-toast';\nimport { useAuth } from './AuthContext';\n\n// Create resume context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ResumeContext = /*#__PURE__*/createContext();\n\n// Resume provider component\nexport const ResumeProvider = ({\n  children\n}) => {\n  _s();\n  const [resumeData, setResumeData] = useState(null);\n  const [resumeInfo, setResumeInfo] = useState(null);\n  const [resumeInsights, setResumeInsights] = useState(null);\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const {\n    currentUser,\n    isAuthenticated\n  } = useAuth();\n\n  // Load resume status when user is authenticated\n  useEffect(() => {\n    if (isAuthenticated && currentUser !== null && currentUser !== void 0 && currentUser.hasResume) {\n      fetchResumeStatus();\n    } else {\n      // Reset data if user is not authenticated or doesn't have resume\n      setResumeData(null);\n      setResumeInfo(null);\n      setResumeInsights(null);\n      setIsProcessing(false);\n    }\n  }, [isAuthenticated, currentUser]);\n\n  // Fetch resume status\n  const fetchResumeStatus = async () => {\n    try {\n      setLoading(true);\n      const response = await axios.get('/api/resume/status');\n      setResumeInfo(response.data.resume);\n      setIsProcessing(!response.data.resume.isProcessed);\n      if (response.data.resume.isProcessed) {\n        await fetchResumeData();\n      }\n      return response.data.resume;\n    } catch (error) {\n      console.error('Fetch resume status error:', error);\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Fetch resume data\n  const fetchResumeData = async () => {\n    try {\n      setLoading(true);\n      const response = await axios.get('/api/resume/data');\n      setResumeData(response.data.resumeData);\n      return response.data.resumeData;\n    } catch (error) {\n      console.error('Fetch resume data error:', error);\n      if (error.response && error.response.data.isProcessing) {\n        setIsProcessing(true);\n      }\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Upload resume\n  const uploadResume = async file => {\n    try {\n      setLoading(true);\n      setIsProcessing(true);\n      const formData = new FormData();\n      formData.append('resume', file);\n      const response = await axios.post('/api/resume/upload', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      setResumeInfo(response.data.resume);\n      toast.success('Resume uploaded successfully! Processing in progress...');\n\n      // Start polling for resume processing status\n      startPollingResumeStatus();\n      return response.data.resume;\n    } catch (error) {\n      console.error('Upload resume error:', error);\n      let errorMessage = 'Failed to upload resume. Please try again.';\n      if (error.response) {\n        errorMessage = error.response.data.error || errorMessage;\n      }\n      toast.error(errorMessage);\n      setIsProcessing(false);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Poll for resume processing status\n  const startPollingResumeStatus = () => {\n    const pollInterval = setInterval(async () => {\n      try {\n        const response = await axios.get('/api/resume/status');\n        if (response.data.resume.isProcessed) {\n          clearInterval(pollInterval);\n          setIsProcessing(false);\n          setResumeInfo(response.data.resume);\n          toast.success('Resume processed successfully!');\n\n          // Fetch the processed resume data\n          await fetchResumeData();\n        } else if (response.data.resume.processingError) {\n          clearInterval(pollInterval);\n          setIsProcessing(false);\n          setResumeInfo(response.data.resume);\n          toast.error(`Resume processing failed: ${response.data.resume.processingError}`);\n        }\n      } catch (error) {\n        console.error('Resume status polling error:', error);\n      }\n    }, 5000); // Poll every 5 seconds\n\n    // Clear interval after 5 minutes (to avoid infinite polling)\n    setTimeout(() => {\n      clearInterval(pollInterval);\n\n      // If still processing after timeout, update UI\n      if (isProcessing) {\n        setIsProcessing(false);\n        toast.error('Resume processing is taking longer than expected. Please check back later.');\n      }\n    }, 5 * 60 * 1000);\n  };\n\n  // Delete resume\n  const deleteResume = async () => {\n    try {\n      setLoading(true);\n      await axios.delete('/api/resume');\n      setResumeData(null);\n      setResumeInfo(null);\n      setResumeInsights(null);\n      setIsProcessing(false);\n      toast.success('Resume deleted successfully!');\n      return true;\n    } catch (error) {\n      console.error('Delete resume error:', error);\n      let errorMessage = 'Failed to delete resume. Please try again.';\n      if (error.response) {\n        errorMessage = error.response.data.error || errorMessage;\n      }\n      toast.error(errorMessage);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Fetch resume insights\n  const fetchResumeInsights = async (forceRefresh = false) => {\n    // Return cached insights if available and no refresh requested\n    if (resumeInsights && !forceRefresh) {\n      return resumeInsights;\n    }\n    try {\n      setLoading(true);\n      const response = await axios.get('/api/suggestions/resume-insights');\n      setResumeInsights(response.data.insights);\n      return response.data.insights;\n    } catch (error) {\n      console.error('Fetch resume insights error:', error);\n      let errorMessage = 'Failed to fetch resume insights. Please try again.';\n      if (error.response) {\n        errorMessage = error.response.data.error || errorMessage;\n        if (error.response.data.needsResume) {\n          errorMessage = 'Resume required to generate insights.';\n        }\n      }\n      toast.error(errorMessage);\n      return null;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Download resume\n  const downloadResume = async () => {\n    try {\n      setLoading(true);\n      const response = await axios.get('/api/resume/download', {\n        responseType: 'blob'\n      });\n\n      // Create blob URL\n      const url = window.URL.createObjectURL(new Blob([response.data]));\n\n      // Create temporary link and trigger download\n      const link = document.createElement('a');\n      link.href = url;\n      link.setAttribute('download', (resumeInfo === null || resumeInfo === void 0 ? void 0 : resumeInfo.fileName) || 'resume');\n      document.body.appendChild(link);\n      link.click();\n\n      // Cleanup\n      link.parentNode.removeChild(link);\n      window.URL.revokeObjectURL(url);\n      return true;\n    } catch (error) {\n      console.error('Download resume error:', error);\n      let errorMessage = 'Failed to download resume. Please try again.';\n      if (error.response) {\n        errorMessage = error.response.data.error || errorMessage;\n      }\n      toast.error(errorMessage);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Context value\n  const value = {\n    resumeData,\n    resumeInfo,\n    resumeInsights,\n    isProcessing,\n    loading,\n    hasResume: !!resumeInfo,\n    uploadResume,\n    fetchResumeStatus,\n    fetchResumeData,\n    deleteResume,\n    fetchResumeInsights,\n    downloadResume\n  };\n  return /*#__PURE__*/_jsxDEV(ResumeContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 266,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook to use resume context\n_s(ResumeProvider, \"yOCl6XXL+I/yp2W8sknAQsexbUk=\", false, function () {\n  return [useAuth];\n});\n_c = ResumeProvider;\nexport const useResume = () => {\n  _s2();\n  return useContext(ResumeContext);\n};\n_s2(useResume, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"ResumeProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","axios","toast","useAuth","jsxDEV","_jsxDEV","ResumeContext","ResumeProvider","children","_s","resumeData","setResumeData","resumeInfo","setResumeInfo","resumeInsights","setResumeInsights","isProcessing","setIsProcessing","loading","setLoading","currentUser","isAuthenticated","hasResume","fetchResumeStatus","response","get","data","resume","isProcessed","fetchResumeData","error","console","uploadResume","file","formData","FormData","append","post","headers","success","startPollingResumeStatus","errorMessage","pollInterval","setInterval","clearInterval","processingError","setTimeout","deleteResume","delete","fetchResumeInsights","forceRefresh","insights","needsResume","downloadResume","responseType","url","window","URL","createObjectURL","Blob","link","document","createElement","href","setAttribute","fileName","body","appendChild","click","parentNode","removeChild","revokeObjectURL","value","Provider","_jsxFileName","lineNumber","columnNumber","_c","useResume","_s2","$RefreshReg$"],"sources":["C:/Users/ashut/Documents/Projects/JobsAI/client/src/contexts/ResumeContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { toast } from 'react-hot-toast';\r\nimport { useAuth } from './AuthContext';\r\n\r\n// Create resume context\r\nconst ResumeContext = createContext();\r\n\r\n// Resume provider component\r\nexport const ResumeProvider = ({ children }) => {\r\n  const [resumeData, setResumeData] = useState(null);\r\n  const [resumeInfo, setResumeInfo] = useState(null);\r\n  const [resumeInsights, setResumeInsights] = useState(null);\r\n  const [isProcessing, setIsProcessing] = useState(false);\r\n  const [loading, setLoading] = useState(false);\r\n  \r\n  const { currentUser, isAuthenticated } = useAuth();\r\n  \r\n  // Load resume status when user is authenticated\r\n  useEffect(() => {\r\n    if (isAuthenticated && currentUser?.hasResume) {\r\n      fetchResumeStatus();\r\n    } else {\r\n      // Reset data if user is not authenticated or doesn't have resume\r\n      setResumeData(null);\r\n      setResumeInfo(null);\r\n      setResumeInsights(null);\r\n      setIsProcessing(false);\r\n    }\r\n  }, [isAuthenticated, currentUser]);\r\n  \r\n  // Fetch resume status\r\n  const fetchResumeStatus = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await axios.get('/api/resume/status');\r\n      \r\n      setResumeInfo(response.data.resume);\r\n      setIsProcessing(!response.data.resume.isProcessed);\r\n      \r\n      if (response.data.resume.isProcessed) {\r\n        await fetchResumeData();\r\n      }\r\n      \r\n      return response.data.resume;\r\n    } catch (error) {\r\n      console.error('Fetch resume status error:', error);\r\n      return null;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  \r\n  // Fetch resume data\r\n  const fetchResumeData = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await axios.get('/api/resume/data');\r\n      \r\n      setResumeData(response.data.resumeData);\r\n      return response.data.resumeData;\r\n    } catch (error) {\r\n      console.error('Fetch resume data error:', error);\r\n      \r\n      if (error.response && error.response.data.isProcessing) {\r\n        setIsProcessing(true);\r\n      }\r\n      \r\n      return null;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  \r\n  // Upload resume\r\n  const uploadResume = async (file) => {\r\n    try {\r\n      setLoading(true);\r\n      setIsProcessing(true);\r\n      \r\n      const formData = new FormData();\r\n      formData.append('resume', file);\r\n      \r\n      const response = await axios.post('/api/resume/upload', formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data'\r\n        }\r\n      });\r\n      \r\n      setResumeInfo(response.data.resume);\r\n      \r\n      toast.success('Resume uploaded successfully! Processing in progress...');\r\n      \r\n      // Start polling for resume processing status\r\n      startPollingResumeStatus();\r\n      \r\n      return response.data.resume;\r\n    } catch (error) {\r\n      console.error('Upload resume error:', error);\r\n      let errorMessage = 'Failed to upload resume. Please try again.';\r\n      \r\n      if (error.response) {\r\n        errorMessage = error.response.data.error || errorMessage;\r\n      }\r\n      \r\n      toast.error(errorMessage);\r\n      setIsProcessing(false);\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  \r\n  // Poll for resume processing status\r\n  const startPollingResumeStatus = () => {\r\n    const pollInterval = setInterval(async () => {\r\n      try {\r\n        const response = await axios.get('/api/resume/status');\r\n        \r\n        if (response.data.resume.isProcessed) {\r\n          clearInterval(pollInterval);\r\n          setIsProcessing(false);\r\n          setResumeInfo(response.data.resume);\r\n          toast.success('Resume processed successfully!');\r\n          \r\n          // Fetch the processed resume data\r\n          await fetchResumeData();\r\n        } else if (response.data.resume.processingError) {\r\n          clearInterval(pollInterval);\r\n          setIsProcessing(false);\r\n          setResumeInfo(response.data.resume);\r\n          toast.error(`Resume processing failed: ${response.data.resume.processingError}`);\r\n        }\r\n      } catch (error) {\r\n        console.error('Resume status polling error:', error);\r\n      }\r\n    }, 5000); // Poll every 5 seconds\r\n    \r\n    // Clear interval after 5 minutes (to avoid infinite polling)\r\n    setTimeout(() => {\r\n      clearInterval(pollInterval);\r\n      \r\n      // If still processing after timeout, update UI\r\n      if (isProcessing) {\r\n        setIsProcessing(false);\r\n        toast.error('Resume processing is taking longer than expected. Please check back later.');\r\n      }\r\n    }, 5 * 60 * 1000);\r\n  };\r\n  \r\n  // Delete resume\r\n  const deleteResume = async () => {\r\n    try {\r\n      setLoading(true);\r\n      await axios.delete('/api/resume');\r\n      \r\n      setResumeData(null);\r\n      setResumeInfo(null);\r\n      setResumeInsights(null);\r\n      setIsProcessing(false);\r\n      \r\n      toast.success('Resume deleted successfully!');\r\n      return true;\r\n    } catch (error) {\r\n      console.error('Delete resume error:', error);\r\n      let errorMessage = 'Failed to delete resume. Please try again.';\r\n      \r\n      if (error.response) {\r\n        errorMessage = error.response.data.error || errorMessage;\r\n      }\r\n      \r\n      toast.error(errorMessage);\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  \r\n  // Fetch resume insights\r\n  const fetchResumeInsights = async (forceRefresh = false) => {\r\n    // Return cached insights if available and no refresh requested\r\n    if (resumeInsights && !forceRefresh) {\r\n      return resumeInsights;\r\n    }\r\n    \r\n    try {\r\n      setLoading(true);\r\n      const response = await axios.get('/api/suggestions/resume-insights');\r\n      \r\n      setResumeInsights(response.data.insights);\r\n      return response.data.insights;\r\n    } catch (error) {\r\n      console.error('Fetch resume insights error:', error);\r\n      let errorMessage = 'Failed to fetch resume insights. Please try again.';\r\n      \r\n      if (error.response) {\r\n        errorMessage = error.response.data.error || errorMessage;\r\n        \r\n        if (error.response.data.needsResume) {\r\n          errorMessage = 'Resume required to generate insights.';\r\n        }\r\n      }\r\n      \r\n      toast.error(errorMessage);\r\n      return null;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  \r\n  // Download resume\r\n  const downloadResume = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await axios.get('/api/resume/download', {\r\n        responseType: 'blob'\r\n      });\r\n      \r\n      // Create blob URL\r\n      const url = window.URL.createObjectURL(new Blob([response.data]));\r\n      \r\n      // Create temporary link and trigger download\r\n      const link = document.createElement('a');\r\n      link.href = url;\r\n      link.setAttribute('download', resumeInfo?.fileName || 'resume');\r\n      document.body.appendChild(link);\r\n      link.click();\r\n      \r\n      // Cleanup\r\n      link.parentNode.removeChild(link);\r\n      window.URL.revokeObjectURL(url);\r\n      \r\n      return true;\r\n    } catch (error) {\r\n      console.error('Download resume error:', error);\r\n      let errorMessage = 'Failed to download resume. Please try again.';\r\n      \r\n      if (error.response) {\r\n        errorMessage = error.response.data.error || errorMessage;\r\n      }\r\n      \r\n      toast.error(errorMessage);\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  \r\n  // Context value\r\n  const value = {\r\n    resumeData,\r\n    resumeInfo,\r\n    resumeInsights,\r\n    isProcessing,\r\n    loading,\r\n    hasResume: !!resumeInfo,\r\n    uploadResume,\r\n    fetchResumeStatus,\r\n    fetchResumeData,\r\n    deleteResume,\r\n    fetchResumeInsights,\r\n    downloadResume\r\n  };\r\n  \r\n  return (\r\n    <ResumeContext.Provider value={value}>\r\n      {children}\r\n    </ResumeContext.Provider>\r\n  );\r\n};\r\n\r\n// Custom hook to use resume context\r\nexport const useResume = () => {\r\n  return useContext(ResumeContext);\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}